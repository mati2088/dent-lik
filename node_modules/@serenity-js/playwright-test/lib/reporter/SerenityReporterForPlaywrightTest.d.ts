import type { FullConfig } from '@playwright/test';
import type { Reporter, Suite, TestCase, TestResult } from '@playwright/test/reporter';
import type { ClassDescription, Serenity, StageCrewMember, StageCrewMemberBuilder } from '@serenity-js/core';
import type { OutputStream } from '@serenity-js/core/lib/adapter';
/**
 * Configuration object accepted by `@serenity-js/playwright-test` reporter.
 *
 * See {@apilink SerenityOptions} for usage examples.
 */
export interface SerenityReporterForPlaywrightTestConfig {
    /**
     * A list of {@apilink StageCrewMemberBuilder|StageCrewMemberBuilders} or {@apilink StageCrewMember|StageCrewMembers}
     * to be instantiated in Playwright Test reporter process and notified of {@apilink DomainEvent|DomainEvents} that occur during the scenario execution.
     * Note that the `crew` can also be configured using {@apilink ClassDescription|ClassDescriptions}.
     *
     * #### Learn more
     * - {@apilink SerenityOptions}
     * - {@apilink SerenityConfig.crew}
     */
    crew?: Array<StageCrewMember | StageCrewMemberBuilder | ClassDescription>;
    /**
     * An output stream to be injected into {@apilink StageCrewMemberBuilder|StageCrewMemberBuilders}
     *
     * Defaults to [`process.stdout`](https://nodejs.org/api/process.html#process_process_stdout).
     *
     * #### Learn more
     * - {@apilink SerenityConfig.outputStream}
     */
    outputStream?: OutputStream;
}
/**
 * Serenity/JS reporter that receives notifications from Playwright Test and emits them as
 * Serenity/JS {@apilink DomainEvent|domain events} which can be used by
 * Serenity/JS {@apilink StageCrewMember|stage crew members}.
 */
export declare class SerenityReporterForPlaywrightTest implements Reporter {
    private readonly serenity;
    private errorParser;
    private sceneIds;
    /**
     * @param config
     * @param serenity
     *  Instance of {@apilink Serenity}, specific to the Node process running this Serenity reporter.
     *  Note that Playwright runs test workers and reporters in separate processes.
     */
    constructor(config: SerenityReporterForPlaywrightTestConfig, serenity?: Serenity);
    onBegin(config: FullConfig, suite: Suite): void;
    onTestBegin(test: TestCase): void;
    onTestEnd(test: TestCase, result: TestResult): void;
    private determineScenarioOutcome;
    private outcomeFrom;
    private scenarioDetailsFrom;
    onEnd(): Promise<void>;
    private emit;
    private announceRetryIfNeeded;
    private now;
    printsToStdio(): boolean;
}
//# sourceMappingURL=SerenityReporterForPlaywrightTest.d.ts.map