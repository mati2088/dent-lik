"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaywrightBrowsingSession = void 0;
const model_1 = require("@serenity-js/core/lib/model");
const web_1 = require("@serenity-js/web");
const models_1 = require("../models");
/**
 * Playwright-specific implementation of {@apilink BrowsingSession}.
 *
 * @group Models
 */
class PlaywrightBrowsingSession extends web_1.BrowsingSession {
    constructor(browserContextOptions) {
        super();
        this.browserContextOptions = browserContextOptions;
    }
    async cookie(name) {
        const context = await this.browserContext();
        return new models_1.PlaywrightCookie(context, name);
    }
    async setCookie(cookie) {
        const context = await this.browserContext();
        await context.addCookies([cookie]);
    }
    async deleteAllCookies() {
        const context = await this.browserContext();
        await context.clearCookies();
    }
    async registerCurrentPage() {
        const context = await this.browserContext();
        await context.newPage();
        // calling context.newPage() triggers a callback registered via browserContext(),
        // which wraps playwright.Page in PlaywrightPage and adds it to the list of pages
        // returned by this.allPages()
        const allPages = await this.allPages();
        return allPages.at(-1);
    }
    async browserContext() {
        if (!this.currentPlaywrightBrowserContext) {
            this.currentPlaywrightBrowserContext = await this.createBrowserContext(this.browserContextOptions);
            this.currentPlaywrightBrowserContext.on('page', async (page) => {
                this.register(new models_1.PlaywrightPage(this, page, this.browserContextOptions, model_1.CorrelationId.create()));
            });
            if (this.browserContextOptions?.defaultNavigationTimeout) {
                this.currentPlaywrightBrowserContext.setDefaultNavigationTimeout(this.browserContextOptions?.defaultNavigationTimeout);
            }
            if (this.browserContextOptions?.defaultTimeout) {
                this.currentPlaywrightBrowserContext.setDefaultTimeout(this.browserContextOptions?.defaultTimeout);
            }
        }
        return this.currentPlaywrightBrowserContext;
    }
}
exports.PlaywrightBrowsingSession = PlaywrightBrowsingSession;
//# sourceMappingURL=PlaywrightBrowsingSession.js.map